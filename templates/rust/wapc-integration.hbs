/**********************************************
***** This file is generated, do not edit *****
***********************************************/

use vino_provider::wasm::prelude::*;

type Result<T> = std::result::Result<T, Error>;

#[no_mangle]
pub(crate) extern "C" fn __guest_call(op_len: i32, req_len: i32) -> i32 {
  use std::slice;

  let buf: Vec<u8> = Vec::with_capacity(req_len as _);
  let req_ptr = buf.as_ptr();

  let opbuf: Vec<u8> = Vec::with_capacity(op_len as _);
  let op_ptr = opbuf.as_ptr();

  let (slice, op) = unsafe {
    wapc::__guest_request(op_ptr, req_ptr);
    (
      slice::from_raw_parts(req_ptr, req_len as _),
      slice::from_raw_parts(op_ptr, op_len as _),
    )
  };

  let op_str = ::std::str::from_utf8(op).unwrap();

  match Dispatcher::dispatch(op_str, slice) {
    Ok(response) => {
      unsafe { wapc::__guest_response(response.as_ptr(), response.len()) }
      1
    }
    Err(e) => {
      let errmsg = e.to_string();
      unsafe {
        wapc::__guest_error(errmsg.as_ptr(), errmsg.len() as _);
      }
      0
    }
  }
}

static  ALL_COMPONENTS: &[&str] = &[
{{#each schemas}}
"{{document.namespace.name.value}}",
{{/each}}
];

pub struct Dispatcher {}
impl Dispatch for Dispatcher {
  fn dispatch(op: &str, payload: &[u8]) -> CallResult {
    let payload = IncomingPayload::from_buffer(payload)?;
    let result = match op {
      {{#each schemas}}
        "{{document.namespace.name.value}}" => {{snakeCase file.unhyphenated}}::Component::new().execute(&payload),
      {{/each}}
      _ => Err(Error::ComponentNotFound(op.to_owned(), ALL_COMPONENTS.join(", "))),
    }?;
    Ok(serialize(&result)?)
  }
}

{{#each schemas}}
pub (crate) mod {{snakeCase file.unhyphenated}} {
  use crate::components::{{snakeCase file.unhyphenated}} as implementation;

  use serde::{
    Deserialize,
    Serialize,
  };
  pub use vino_provider::wasm::{JobResult, console_log, PortSender};

  use super::*;

  pub(crate) struct Component {}

  impl Component {
    pub fn new() -> Self {
      Self { }
    }
  }
  impl WapcComponent for Component {
    fn execute(&self, payload: &IncomingPayload) -> JobResult {
      let inputs = populate_inputs(payload)?;
      let outputs = get_outputs();
      implementation::job(inputs, outputs)
    }
  }

{{#with document}}
{{#each definitions}}
{{#switch kind}}
  {{#case "NamespaceDefinition"}}{{/case}}
  {{#case "TypeDefinition"}}
    {{#switch name.value}}
        {{> TypeDefinition .}}
    {{/switch}}
  {{/case}}
  {{#default}}
    {{debug .}}
    {{panic "WIDL Node not yet handled"}}
  {{/default}}
{{/switch}}
{{/each}}
{{/with}}
}
{{/each}}
