/**********************************************
***** This file is generated, do not edit *****
***********************************************/
use wapc_guest::{
  register_function,
  HandlerResult,
  CallResult,host_call
};

use vino_component::codec::messagepack::{
  deserialize,
  serialize,
};

pub fn register_handlers() {
  {{#each schemas}}
  Handlers::register_{{snakeCase document.namespace.name.value}}(crate::components::{{snakeCase file.unhyphenated}}::job);
  {{/each}}
}

#[cfg(feature = "guest")]
pub struct Handlers {}

#[cfg(feature = "guest")]
impl Handlers {
{{#each schemas}}
    pub fn register_{{snakeCase document.namespace.name.value}}(f: fn({{snakeCase file.unhyphenated}}::Inputs, {{snakeCase file.unhyphenated}}::Outputs) -> HandlerResult<()>) {
        *{{upperCase (snakeCase document.namespace.name.value)}}.write().unwrap() = Some(f);
        register_function("{{document.namespace.name.value}}", {{snakeCase document.namespace.name.value}}_wrapper);
    }
{{/each}}
}

#[cfg(feature = "guest")]
lazy_static::lazy_static! {
{{#each schemas}}
#[allow(clippy::type_complexity)]
static ref {{upperCase (snakeCase document.namespace.name.value)}}: std::sync::RwLock<Option<{{snakeCase file.unhyphenated}}::JobSignature>> = std::sync::RwLock::new(None);
{{/each}}
}

{{#each schemas}}
#[cfg(feature = "guest")]
fn {{snakeCase document.namespace.name.value}}_wrapper(input_payload: &[u8]) -> CallResult {
    use {{snakeCase file.unhyphenated}}::*;
    let (inv_id, input_encoded): (String, InputEncoded) = deserialize(input_payload)?;
    let outputs = get_outputs(&inv_id);
    let inputs: Inputs = deserialize_inputs(input_encoded)?;
    let lock = {{upperCase (snakeCase document.namespace.name.value)}}.read().unwrap().unwrap();
    let result = lock(inputs, outputs)?;
    Ok(serialize(result)?)
}
{{/each}}

{{#each schemas}}
pub (crate) mod {{snakeCase file.unhyphenated}} {
  use serde::{
    Deserialize,
    Serialize,
  };

  use vino_component::v0::Payload;
  use vino_component::Packet;

  use super::*;

  pub(crate) type JobSignature = fn(Inputs, Outputs) -> HandlerResult<()>;

{{#with document}}
{{#each definitions}}
{{#switch kind}}
  {{#case "NamespaceDefinition"}}
  // Implementation for {{name.value}}
  {{/case}}
  {{#case "TypeDefinition"}}
    {{#switch name.value}}
        {{> TypeDefinition .}}
    {{/switch}}
  {{/case}}
  {{#default}}
    {{debug .}}
    {{panic "WIDL Node not yet handled"}}
  {{/default}}
{{/switch}}
{{/each}}

{{/with}}
}
{{/each}}
