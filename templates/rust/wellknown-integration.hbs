/**********************************************
***** This file is generated, do not edit *****
***********************************************/

pub(crate) use vino_provider::native::prelude::*;

pub(crate) fn get_signature() -> ProviderSignature {
  use std::collections::HashMap;
  let mut components = HashMap::new();
  {{#each interface.components}}
    components.insert("{{name}}".to_owned(), {{snakeCase @root.interface.name}}::{{snakeCase name}}::signature());
  {{/each}}
  {{#each schemas}}
    components.insert("{{document.namespace.name.value}}".to_owned(), generated::{{snakeCase file.unhyphenated}}::signature());
  {{/each}}


  ProviderSignature {
    name: "".to_owned(),
    types: StructMap::todo(),
    components: components.into()
  }

}

#[derive(Debug)]
pub(crate) struct Dispatcher {}
#[async_trait]
impl Dispatch for Dispatcher {
  type Context = crate::Context;
  async fn dispatch(
    op: &str,
    context: Self::Context,
    data: TransportMap,
  ) -> Result<TransportStream, Box<NativeComponentError>>{
    let result = match op {
      {{#each interface.components}}
        "{{ name }}" => self::{{snakeCase name}}::Component::default().execute(context, data).await,
      {{/each}}
      _ => Err(Box::new(NativeComponentError::new(format!(
        "Component not found on this provider: {}",
        op
      )))),
    }?;
    Ok(result)
  }
}

{{#each interface.components}}
pub (crate) mod {{snakeCase name}} {
  #![allow(unused)]
  use {{snakeCase @root.interface.name}}::{{snakeCase name}}::*;


  {{> component . }}
}
{{/each}}