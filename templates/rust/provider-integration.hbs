
// This file is generated, do not edit
use vino_provider::{VinoProviderComponent, ComponentSignature};
pub(crate) mod generated;

{{#each definitions}}
  {{#switch kind}}
    {{#case "ImportDefinition"}}
pub mod {{snakeCase from.value}};
    {{/case}}
  {{/switch}}
{{/each}}

pub(crate) fn get_component(
    name: &str,
) -> Option<Box<dyn VinoProviderComponent<Context = crate::State> + Sync + Send>> {
    match name {
      {{#each definitions}}
        {{#switch kind}}
          {{#case "ImportDefinition"}}
            {{#import from.value}}"{{ namespace.name.value }}"{{/import}} => Some(Box::new(generated::{{snakeCase from.value}}::Component::default())),
          {{/case}}
        {{/switch}}
      {{/each}}
        _ => None,
    }
}

pub(crate) fn get_all_components() -> Vec<ComponentSignature> {
  vec![
  {{#each definitions}}
    {{#switch kind}}
      {{#case "ImportDefinition"}}
        ComponentSignature {
        {{#import from.value}}
          name: "{{namespace.name.value }}".to_string(),
        {{/import}}
        inputs : generated::{{snakeCase from.value}}::inputs_list().into_iter().map(From::from).collect(),
        outputs : generated::{{snakeCase from.value}}::outputs_list().into_iter().map(From::from).collect(),
        },
      {{/case}}
    {{/switch}}
  {{/each}}
  ]
}