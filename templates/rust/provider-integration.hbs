/**********************************************
***** This file is generated, do not edit *****
***********************************************/

use vino_provider::{VinoProviderComponent, ComponentSignature};

use crate::generated;

pub(crate) fn get_component(
    name: &str,
) -> Option<Box<dyn VinoProviderComponent<Context = crate::State> + Sync + Send>> {
    match name {
      {{#each schemas}}
        "{{ document.namespace.name.value }}" => Some(Box::new(generated::{{snakeCase file.unhyphenated}}::Component::default())),
      {{/each}}
        _ => None,
    }
}

pub(crate) fn get_all_components() -> Vec<ComponentSignature> {
  vec![
  {{#each schemas}}
    ComponentSignature {
      name: "{{document.namespace.name.value }}".to_owned(),
      inputs : generated::{{snakeCase file.unhyphenated}}::inputs_list().into_iter().map(From::from).collect(),
      outputs : generated::{{snakeCase file.unhyphenated}}::outputs_list().into_iter().map(From::from).collect(),
    },
  {{/each}}
  ]
}

{{#each schemas}}
pub (crate) mod {{snakeCase file.unhyphenated}} {
  {{> component document }}
}
{{/each}}