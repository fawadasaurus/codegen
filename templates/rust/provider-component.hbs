/**********************************************
***** This file is generated, do not edit *****
***********************************************/

use std::collections::HashMap;
use std::sync::{
  Arc,
  Mutex,
};

use async_trait::async_trait;
use serde::{
  Deserialize,
  Serialize,
};
use vino_codec::messagepack::deserialize;
use vino_provider::error::ProviderError;
use vino_provider::{
  Context as ProviderContext,
  VinoProviderComponent,
};
use vino_rpc::port::{
  Port,
  PortStream,
  Sender,
};

{{#eachWithName definitions "Inputs" }}
#[derive(Debug, PartialEq, Deserialize, Serialize, Default, Clone)]
pub (crate) struct Inputs {
  {{#each fields}}
    pub (crate){{snakeCase name.value}}: {{> expand-type type }},
  {{/each}}
}

pub(crate) fn inputs_list() -> Vec<(&'static str, &'static str)> {
    vec![{{#join fields ","}}("{{name.value}}", "{{codegen-type type}}"){{/join}}]
}

#[derive(Debug, PartialEq, Deserialize, Serialize, Default, Clone)]
pub (crate) struct InputEncoded {
  {{#each fields}}
    #[serde(rename = "{{name.value}}")]
    pub (crate) {{snakeCase name.value}}: Vec<u8>,
  {{/each}}
}

pub (crate) fn deserialize_inputs(
    map: &HashMap<String, Vec<u8>>,
) -> Result<
    Inputs, Box<dyn std::error::Error + Send + Sync>,
> {
    Ok(Inputs {
      {{#each fields}}
        {{snakeCase name.value}}: deserialize(map.get("{{name.value}}").unwrap())?,
      {{/each}}
    })
}
{{/eachWithName}}


{{#eachWithName definitions "Outputs" }}
#[derive(Default)]
pub (crate) struct Outputs {
  {{#each fields}}
    pub (crate) {{snakeCase name.value}}: {{pascalCase name.value}}Sender,
  {{/each}}
}

pub(crate) fn outputs_list() -> Vec<(&'static str, &'static str)> {
    vec![{{#join fields ","}}("{{name.value}}", "{{codegen-type type}}"){{/join}}]
}

{{#each fields}}
pub (crate) struct {{pascalCase name.value}}Sender {
    port: Arc<Mutex<Port>>,
}
impl Default for {{pascalCase name.value}}Sender {
    fn default() -> Self {
        Self {
            port: Arc::new(Mutex::new(Port::new("{{name.value}}".into()))),
        }
    }
}
impl Sender for {{pascalCase name.value}}Sender {
    type PayloadType = {{>expand-type type}};

    fn get_port(&self) -> Arc<Mutex<Port>> {
        self.port.clone()
    }
}
{{/each}}

pub (crate) fn get_outputs() -> (Outputs, PortStream) {
    let outputs = Outputs::default();
    let ports = vec![
    {{#each fields}}
    outputs.{{snakeCase name.value}}.port.clone(),
    {{/each}}
    ];
    let stream = PortStream::new(ports);
    (outputs, stream)
}

{{/eachWithName}}

pub(crate) struct Component {}
impl Default for Component {
  fn default() -> Self {
    Self {}
  }
}

#[async_trait]
impl VinoProviderComponent for Component {
  type Context = crate::State;

  fn get_name(&self) -> String {
    format!("vino::{}", "{{namespace.name.value}}")
  }
  fn get_input_ports(&self) -> Vec<(&'static str, &'static str)> {
    inputs_list()
  }
  fn get_output_ports(&self) -> Vec<(&'static str, &'static str)> {
    outputs_list()
  }
  async fn job_wrapper(
    &self,
    context: ProviderContext<Self::Context>,
    data: HashMap<String, Vec<u8>>,
  ) -> Result<PortStream, Box<dyn std::error::Error + Send + Sync>> {
    let inputs = deserialize_inputs(&data).map_err(ProviderError::InputDeserializationError)?;
    let (outputs, stream) = get_outputs();
    let result = super::super::{{snakeCase namespace.name.value}}::job(inputs, outputs, context).await;
    match result {
      Ok(_) => Ok(stream),
      Err(e) => Err(ProviderError::JobError(format!("Job failed: {}", e.to_string())).into()),
    }
  }
}
