use std::sync::{Arc, Mutex};
use std::collections::HashMap;
use serde::{Deserialize, Serialize};
use vino_codec::messagepack::deserialize;
use vino_rpc::port::{Port, Receiver, Sender};

{{#eachWithName definitions "Inputs" }}
#[derive(Debug, PartialEq, Deserialize, Serialize, Default, Clone)]
pub (crate) struct Inputs {
  {{#each fields}}
    pub (crate){{snakeCase name.value}}: {{> expand-type type }},
  {{/each}}
}

pub(crate) fn inputs_list() -> Vec<(String, String)> {
    vec![{{#join fields ","}}("{{name.value}}".to_string(), "{{codegen-type type}}".to_string()){{/join}}]
}

#[derive(Debug, PartialEq, Deserialize, Serialize, Default, Clone)]
pub (crate) struct InputEncoded {
  {{#each fields}}
    #[serde(rename = "{{name.value}}")]
    pub (crate) {{snakeCase name.value}}: Vec<u8>,
  {{/each}}
}

pub (crate) fn deserialize_inputs(
    map: &HashMap<String, Vec<u8>>,
) -> Result<
    Inputs, Box<dyn std::error::Error + Send + Sync>,
> {
    Ok(Inputs {
      {{#each fields}}
        {{snakeCase name.value}}: deserialize(map.get("{{name.value}}").unwrap())?,
      {{/each}}
    })
}
{{/eachWithName}}


{{#eachWithName definitions "Outputs" }}
#[derive(Default)]
pub (crate) struct Outputs {
  {{#each fields}}
    pub (crate) {{snakeCase name.value}}: {{pascalCase name.value}}Sender,
  {{/each}}
}

pub(crate) fn outputs_list() -> Vec<(String, String)> {
    vec![{{#join fields ","}}("{{name.value}}".to_string(), "{{codegen-type type}}".to_string()){{/join}}]
}

{{#each fields}}
pub (crate) struct {{pascalCase name.value}}Sender {
    port: Arc<Mutex<Port>>,
}
impl Default for {{pascalCase name.value}}Sender {
    fn default() -> Self {
        Self {
            port: Arc::new(Mutex::new(Port::new("{{name.value}}".into()))),
        }
    }
}
impl Sender for {{pascalCase name.value}}Sender {
    type PayloadType = {{>expand-type type}};

    fn get_port(&self) -> Arc<Mutex<Port>> {
        self.port.clone()
    }
}
{{/each}}

pub (crate) fn get_outputs() -> (Outputs, Receiver) {
    let outputs = Outputs::default();
    let ports = vec![
    {{#each fields}}
    outputs.{{snakeCase name.value}}.port.clone(),
    {{/each}}
    ];
    let receiver = Receiver::new(ports);
    (outputs, receiver)
}

{{/eachWithName}}
