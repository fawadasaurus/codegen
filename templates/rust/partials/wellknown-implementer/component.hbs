
use std::collections::HashMap;

use async_trait::async_trait;
use vino_provider::prelude::*;

#[derive(Default)]
pub(crate) struct Component {}

#[async_trait]
impl NativeComponent for Component {
  type Context = crate::Context;
  async fn execute(
    &self,
    context: Self::Context,
    data: TransportMap,
  ) -> Result<TransportStream, Box<NativeComponentError>> {
    let inputs = populate_inputs(data).map_err(|e| NativeComponentError::new(e.to_string()))?;
    let (outputs, stream) = get_outputs();
    let result = crate::components::{{snakeCase name}}::job(inputs, outputs, context).await;
    match result {
      Ok(_) => Ok(stream),
      Err(e) => Err(Box::new(NativeComponentError::new(format!("Job failed: {}", e.to_string())))),
    }
  }
}