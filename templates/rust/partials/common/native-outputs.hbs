
#[derive(Debug, Default)]
#[cfg(feature = "provider")]
pub struct OutputPorts {
  {{#each .}}
    pub {{snakeCase @key}}: {{pascalCase @key}}PortSender,
  {{/each}}
}

#[must_use]
#[cfg(any(feature = "native", feature = "wasm"))]
pub fn outputs_list() -> std::collections::HashMap<String, TypeSignature> {
  let mut map = std::collections::HashMap::new();
  {{#each .}}
    map.insert("{{@key}}".to_owned(),{{> type-signature .}});
  {{/each}}
  map
}

{{#each .}}
#[derive(Debug)]
#[cfg(feature = "provider")]
pub struct {{pascalCase @key}}PortSender {
    port: PortChannel,
}

#[cfg(feature = "provider")]
impl Default for {{pascalCase @key}}PortSender {
    fn default() -> Self {
        Self {
            port: PortChannel::new("{{@key}}"),
        }
    }
}

#[cfg(feature = "provider")]
impl PortSender for {{pascalCase @key}}PortSender {
    fn get_port(&self) -> Result<&PortChannel, ProviderError> {
      if self.port.is_closed() {
        Err(ProviderError::SendChannelClosed)
      } else {
        Ok(&self.port)
      }
    }

    fn get_port_name(&self) -> String {
      self.port.name.clone()
    }
}
{{/each}}

#[must_use]
#[cfg(feature = "provider")]
pub fn get_outputs() -> (OutputPorts, TransportStream) {
    let mut outputs = OutputPorts::default();
    let mut ports = vec![
    {{#each .}}
    &mut outputs.{{snakeCase @key}}.port,
    {{/each}}
    ];
    let stream = PortChannel::merge_all(&mut ports);
    (outputs, stream)
}


#[cfg(all(feature = "guest"))]
#[allow(missing_debug_implementations)]
pub struct Outputs {
  packets: ProviderOutput
}

#[cfg(all(feature = "native", feature = "guest"))]
impl Outputs {
  {{#each .}}
    pub async fn {{snakeCase @key}}(&mut self)-> Result<PortOutput<{{> expand-type . }}>, ProviderError> {
      let packets = self.packets.take("{{@key}}").await;
      Ok(PortOutput::new("{{@key}}".to_owned(), packets))
    }
  {{/each}}
}

#[cfg(all(feature = "wasm", feature = "guest"))]
impl Outputs {
  {{#each fields}}
    pub fn {{snakeCase @key}}(&mut self)-> Result<PortOutput, WasmError> {
      let packets = self.packets.take("{{@key}}").ok_or_else(|| WasmError::ResponseMissing("{{@key}}".to_owned()))?;
      Ok(PortOutput::new("{{@key}}".to_owned(), packets))
    }
  {{/each}}
}

#[cfg(all(feature = "wasm", feature = "guest"))]
impl From<ProviderOutput> for Outputs {
  fn from(packets: ProviderOutput) -> Self {
    Self{packets}
  }
}


#[cfg(all(feature = "native", feature = "guest"))]
impl From<BoxedTransportStream> for Outputs {
  fn from(stream: BoxedTransportStream) -> Self {
    Self{packets: ProviderOutput::new(stream)}
  }
}