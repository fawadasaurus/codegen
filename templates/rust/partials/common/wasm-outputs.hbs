
#[derive(Debug)]
pub struct OutputPorts {
{{#each .}}
    pub {{snakeCase @key}}: {{pascalCase @key}}Sender,
{{/each}}
}

{{#each .}}
#[derive(Debug, PartialEq, Clone)]
pub struct {{pascalCase @key}}Sender { id: u32 }

impl PortSender for {{pascalCase @key}}Sender {
  type PayloadType = {{> expand-type .}};
  fn get_name(&self) -> String {
    "{{@key}}".to_string()
  }
  fn get_id(&self) -> u32 {
    self.id
  }
}
{{/each}}

fn get_outputs(id:u32) -> OutputPorts {
  OutputPorts {
  {{#each .}}
    {{snakeCase @key}}: {{pascalCase @key}}Sender { id },
  {{/each}}
  }
}

#[derive(Debug)]
pub struct Outputs {
  packets: ProviderOutput
}

impl Outputs {
  {{#each .}}
    pub fn {{snakeCase @key}}(&mut self)-> Result<PortOutput> {
      let packets = self.packets.take("{{@key}}").ok_or_else(||ComponentError::new("No packets for port '{{@key}}' found"))?;
      Ok(PortOutput::new("{{@key}}".to_owned(), packets))
    }
  {{/each}}
}

impl From<ProviderOutput> for Outputs {
  fn from(packets: ProviderOutput) -> Self {
    Self{packets}
  }
}