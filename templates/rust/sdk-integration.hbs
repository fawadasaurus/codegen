extern crate rmp_serde as rmps;
use rmps::{Deserializer, Serializer};
use serde::{Deserialize, Serialize};
use std::io::Cursor;
pub use vino_guest::Signal;
use vino_guest::{OutputPayload};

#[cfg(feature = "guest")]
extern crate wapc_guest as guest;
#[cfg(feature = "guest")]
use guest::prelude::*;

#[cfg(feature = "guest")]
pub struct Handlers {}

#[cfg(feature = "guest")]
impl Handlers {
    pub fn register_job(f: fn(Inputs, Outputs) -> HandlerResult<Signal>) {
        *JOB.write().unwrap() = Some(f);
        register_function(&"job", job_wrapper);
    }
}

#[cfg(feature = "guest")]
lazy_static::lazy_static! {
static ref JOB: std::sync::RwLock<Option<fn(Inputs, Outputs) -> HandlerResult<Signal>>> = std::sync::RwLock::new(None);
}

#[cfg(feature = "guest")]
fn job_wrapper(input_payload: &[u8]) -> CallResult {
    let (inv_id, input_encoded): (String, InputEncoded) = deserialize(input_payload)?;
    let outputs = get_outputs(inv_id);
    let inputs: Inputs = deserialize_inputs(input_encoded)?;
    let lock = JOB.read().unwrap().unwrap();
    let result = lock(inputs, outputs)?;
    serialize(result)
}

{{#each definitions}}
{{#isKind "TypeDefinition"}}
  {{> TypeDefinition .}}
{{/isKind}}
{{#isKind "EnumDefinition"}}
ENUM UNIMPLEMENTED
{{/isKind}}
{{/each}}


/// The standard function for serializing codec structs into a format that can be
/// used for message exchange between actor and host. Use of any other function to
/// serialize could result in breaking incompatibilities.
pub fn serialize<T>(
    item: T,
) -> ::std::result::Result<Vec<u8>, Box<dyn std::error::Error + Send + Sync>>
where
    T: Serialize,
{
    let mut buf = Vec::new();
    item.serialize(&mut Serializer::new(&mut buf).with_struct_map())?;
    Ok(buf)
}

/// The standard function for de-serializing codec structs from a format suitable
/// for message exchange between actor and host. Use of any other function to
/// deserialize could result in breaking incompatibilities.
pub fn deserialize<'de, T: Deserialize<'de>>(
    buf: &[u8],
) -> ::std::result::Result<T, Box<dyn std::error::Error + Send + Sync>> {
    let mut de = Deserializer::new(Cursor::new(buf));
    match Deserialize::deserialize(&mut de) {
        Ok(t) => Ok(t),
        Err(e) => Err(format!("Failed to de-serialize: {}", e).into()),
    }
}
